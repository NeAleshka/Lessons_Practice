{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/login/authReducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/login/Login.tsx","features/error/Error.tsx","components/SearchField.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authApi","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","setIsInitializedAC","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","label","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","searchValue","todolists","useSelector","state","isLoginIn","auth","finally","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","tl","includes","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","isLogedIn","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justifyContent","handleSubmit","FormControl","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","FormLabel","Error","navigate","useNavigate","textAlign","fontSize","fontWeight","SearchField","placeholder","fullWidth","App","isLogin","search","setSearch","AppBar","position","Toolbar","display","Typography","backgroundColor","marginLeft","LinearProgress","Container","fixed","path","element","top","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c71f3ddd.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '552d629c-2943-4e99-a733-e3c3adc34777'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authApi={\r\n    login(data:LoginParamsType){\r\n        return instance.post<LoginParamsType,AxiosResponse<ResponseType<{userId:number}>>>('/auth/login',data)\r\n    },\r\n    me(){\r\n        return instance.get<ResponseType<MeResponseType>>('/auth/me')\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('/auth/login')\r\n    }\r\n}\r\n\r\n// types\r\n\r\ntype MeResponseType={\r\n    id:number\r\n    email:string\r\n    login:string\r\n}\r\n\r\nexport type LoginParamsType={\r\n    email:string,\r\n    password:string,\r\n    rememberMe:boolean,\r\n    captcha?:string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {authApi, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data:LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authApi.login(data).then((res)=>{\r\n      if(res.data.resultCode===0){\r\n          dispatch(setAppStatusAC('succeeded'))\r\n          dispatch(setIsLoggedInAC(true))\r\n      }else {\r\n          handleServerAppError(res.data,dispatch)\r\n      }\r\n    }).catch((error)=>{\r\n        handleServerNetworkError(error,dispatch)\r\n    })\r\n\r\n\r\n}\r\n\r\nexport const logoutTC=()=>(dispatch:Dispatch<ActionsType>)=>{\r\n    dispatch(setAppStatusAC('loading'))\r\n    authApi.logout().then((res)=>{\r\n        if(!res.data.resultCode){\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsLoggedInAC(false))\r\n        }\r\n        else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    }).catch((error)=>{\r\n        handleServerNetworkError(error,dispatch)\r\n    })\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\n\r\n","\r\nimport {Dispatch} from \"redux\";\r\nimport {authApi} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/login/authReducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    debugger\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-INITIALIZED\":\r\n            return {...state,isInitialized:action.value}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authApi.me().then(res => {\r\n        if (res.data.resultCode===0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n        }\r\n\r\n    }).finally(()=>{\r\n        dispatch(setAppStatusAC('failed'))\r\n        dispatch(setIsInitializedAC(true))\r\n    })\r\n\r\n}\r\n\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = (value: boolean) => ({type: 'APP/SET-INITIALIZED', value} as const)\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type setIsInitializedACType = ReturnType<typeof setIsInitializedAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | setIsInitializedACType\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n            }).finally(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\r\n    type: 'UPDATE-TASK',\r\n    model,\r\n    todolistId,\r\n    taskId\r\n} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n    label?:string\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false,label}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label={label}\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'} label={'Add Task'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport { Navigate } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n    searchValue:string\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false,searchValue}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const isLoginIn=useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    if(!isLoginIn){\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist} label={\"Add New Todo List\"}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.filter(tl=>tl.title.includes(searchValue)).map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport { Navigate } from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch=useDispatch()\r\n    const isLogedIn=useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n    const formik=useFormik({\r\n        initialValues:{\r\n            email:'',\r\n            password:'',\r\n            rememberMe:false,\r\n        },\r\n        validate:(values)=>{\r\n            const errors:FormikErrorType={}\r\n            if (!values.email){\r\n                errors.email=\"Email is empty\"\r\n            }\r\n            else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if(!values.password){\r\n                errors.password=\"Email is empty\"\r\n            }\r\n            else if(values.password.length<4){\r\n                errors.password=\"Minimal length password is 4\"\r\n            }\r\n            return errors\r\n            },\r\n        onSubmit:values => {\r\n            dispatch(loginTC(values))\r\n        }\r\n    })\r\n    if(isLogedIn){\r\n      return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'} paddingTop={'100px'}>\r\n        <Grid item justifyContent={'center'}>\r\n          <form onSubmit={formik.handleSubmit}>\r\n              <FormControl>\r\n              <FormGroup>\r\n                  <TextField label=\"Email\" margin=\"normal\"\r\n                             {...formik.getFieldProps('email')}/>\r\n                  {formik.touched.email && formik.errors.email && <div>{formik.errors.email}</div>}\r\n                  <TextField type=\"password\" label=\"Password\" margin=\"normal\"\r\n                             {...formik.getFieldProps('password')}/>\r\n                  {formik.touched.password && formik.errors.password && <div>{formik.errors.password}</div>}\r\n                  <FormControlLabel label={'Remember me'} control={<Checkbox/>}\r\n                                    {...formik.getFieldProps('rememberMe')}/>\r\n                  <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                      Login\r\n                  </Button>\r\n              </FormGroup>\r\n          </FormControl>\r\n              <FormLabel>\r\n                  <p>Use common test account credentials:</p>\r\n                  <p>Email: free@samuraijs.com</p>\r\n                  <p>Password: free</p>\r\n              </FormLabel>\r\n          </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport Button from \"@mui/material/Button\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\n\r\nexport const Error = () => {\r\n    const navigate=useNavigate()\r\n    return (\r\n        <div style={{textAlign: 'center'}}>\r\n            <div style={{color:'#1976d2',fontSize:'100px',fontWeight:'bold'}}>404</div>\r\n            <h1>Page not found</h1>\r\n            <Button variant={'contained'} color={'primary'} onClick={()=>navigate('/')}>\r\n                Go Home\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent} from 'react'\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype SearchFieldType={\r\n    sx?:{}\r\n    value?:string\r\n    onChange?:(event:ChangeEvent<HTMLInputElement>)=>void\r\n}\r\n\r\n\r\nexport const SearchField = ({sx,value,onChange}:SearchFieldType) => {\r\n    return (\r\n        <TextField placeholder={'Enter TodoList Name'} sx={sx} fullWidth={true} value={value} onChange={onChange}>\r\n        </TextField>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/login/Login\";\r\nimport {Navigate, Route, Routes} from 'react-router'\r\nimport {Error} from \"../features/error/Error\";\r\nimport {CircularProgress, TextField, Typography} from \"@mui/material\";\r\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {logoutTC} from \"../features/login/authReducer\";\r\nimport {SearchField} from \"../components/SearchField\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const dispatch=useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLogin = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n    const [search, setSearch] = useState('');\r\n    const onChangeSearch = (event:ChangeEvent<HTMLInputElement>) => {\r\n        setSearch(event.currentTarget.value)\r\n    }\r\n    useEffect(()=>{\r\n        dispatch(initializeAppTC())\r\n    },[dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{display:'flex',justifyContent:'center'}}>\r\n                   <Typography fontSize={'30px'} fontWeight={'bolder'} >ToDoLists.com</Typography>\r\n                    <SearchField sx={{backgroundColor:'white',marginLeft:'30px'}}  onChange={onChangeSearch}/>\r\n                    <IconButton sx={{marginLeft:'400px'}}>\r\n                        <AccountCircleIcon/>\r\n                    </IconButton>\r\n                    {isLogin && <Button color=\"inherit\" onClick={()=>dispatch(logoutTC())}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path='/' element={<TodolistsList searchValue={search}  demo={demo}/>}/>\r\n                    <Route path='/login' element={<Login/>}/>\r\n                    <Route path='/404' element={<Error/>}/>\r\n                    <Route path={\"*\"} element={<Navigate to={'/404'}/>} />\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { appReducer } from './app-reducer'\r\nimport {authReducer} from \"../features/login/authReducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth:authReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from 'react-router-dom'\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}